type Human implements User {
  id: Int!
  name: String!

  """The registration number of the human"""
  registrationNumber: String!
  type: UserType!
}

type Order {
  createdUserId: Int!

  """The ID of the order"""
  id: Int!

  """The items in the order"""
  items: [OrderItem!]!

  """The total price of the order"""
  total: Float!
}

type OrderItem {
  """The ID of the order item"""
  id: Int!

  """The name of the order item"""
  name: String!

  """The price of the order item"""
  price: Float!
}

type Query {
  order(id: Int!): Order!
  orders(gtTotal: Float): [Order!]!
  user(id: Int!): User!
  users(nameIncludes: String): [User!]!
}

type Robot implements User {
  id: Int!

  """The model number of the robot"""
  modelNumber: String!
  name: String!
  type: UserType!
}

interface User {
  id: Int!
  name: String!
  type: UserType!
}

enum UserType {
  """A human user"""
  HUMAN

  """A robot user"""
  ROBOT
}