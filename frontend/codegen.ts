import type { CodegenConfig } from "@graphql-codegen/cli";
import { addTypenameSelectionDocumentTransform } from "@graphql-codegen/client-preset";

const noTypeCheckingPlugin = {
  add: {
    content: [
      "/* eslint-disable @typescript-eslint/ban-ts-comment */",
      "// @ts-nocheck",
      "/* eslint-disable */",
      "/* prettier-ignore */",
      "/* This file is automatically generated. Please do not modify it manually. */",
    ],
  },
};

const config: CodegenConfig = {
  schema: "http://localhost:4000/graphql",
  documents: ["./src/**/*.graphql", "src/**/*.{ts,tsx}"],
  generates: {
    "./src/gql/": {
      preset: "client",
      config: {
        avoidOptionals: {
          inputValue: false,
        },
        enumsAsTypes: true,
        futureProofEnums: false, // For now, we don't need to future proof enums
        strictScalars: true,
        dedupeFragments: true,
        useTypeImports: true,
        scalars: {
          JSON: "null | boolean | number | string | Record<string, unknown> | unknown[]",
          Date: {
            input: "Date",
            output: "Date",
          },
          ObjectID: {
            input: "string",
            output: "string",
          },
          BigNumber: {
            input: "string",
            output: "bignumber.js#BigNumber",
          },
          _Any: "unknown",
        },
      },
      plugins: [noTypeCheckingPlugin],
      presetConfig: {
        fragmentMasking: { unmaskFunctionName: "getFragmentData" },
      },
      documentTransforms: [addTypenameSelectionDocumentTransform],
    },
    "./src/gql/enums.ts": {
      config: {
        typesPrefix: "Gql",
        enumsAsConst: true,
        onlyEnums: true,
        namingConvention: {
          enumValues: "keep",
        },
      },
      plugins: ["typescript"],
    },
    "./src/gql/introspection.json": {
      plugins: ["introspection"],
      config: {
        minify: true,
      },
    },
  },
};
export default config;
